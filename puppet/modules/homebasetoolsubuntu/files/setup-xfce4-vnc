#!/bin/bash
# Copyright (c) 2022, Oracle and/or its affiliates.


if [[ "$EUID" -eq 0 ]]; then
  echo -e "Sorry, you cannot run this as root \n"
  echo -e "just run this script with your normal UID \n"
  exit
fi

if [ ! -d ~/.vnc ]; then
    mkdir ~/.vnc

    cat << EOF > ~/.vnc/xstartup
#!/bin/bash

[ -r $HOME/.Xresources ] && xrdb $HOME/.Xresources
# vncconfig gives cut-n-paste support as well as resizing
vncconfig -iconic &

# xfce4 is our default desktop env
xfce4-session
EOF
    chmod +x ~/.vnc/xstartup

    # your vnc password is your username
    vncpasswd -f <<< $(whoami) > ~/.vnc/passwd
    chmod 600 ~/.vnc/passwd
fi

# disable your screensaver
cp /usr/local/lib/dot_screensaver ~/.xscreensaver
chown $(whoami):$(whoami) ~/.xscreensaver

VNCNUMBER=$(($(id -u) - 6000 + 1))
PIDFILE="$HOME/.vnc/$(hostname):$VNCNUMBER.pid"
if [[ -e $PIDFILE && -e /proc/$(cat $PIDFILE) ]]; then
    # vnc might be running or might be stale
    echo "vnc is running"
else
    vncserver :$VNCNUMBER
fi

#if crontab doesn't have vnc starting on boot, make it so
crontab -l | grep setup-xfce4-vnc || {
    ( crontab -l ; echo $'SHELL=/bin/bash\n@reboot /usr/local/bin/setup-xfce4-vnc' ) | crontab -
}

if [ ! -d ~/proxy01 ] ; then
    mkdir ~/proxy01
    cat <<EOF > ~/proxy01/proxychains.conf
strict_chain
proxy_dns
tcp_read_time_out 15000
tcp_connect_time_out 8000

[ProxyList]
socks5  192.168.2.11 1080
EOF
fi

if [ ! -d ~/proxy02 ] ; then
    mkdir ~/proxy02
    cat <<EOF > ~/proxy02/proxychains.conf
strict_chain
proxy_dns
tcp_read_time_out 15000
tcp_connect_time_out 8000

[ProxyList]
socks5  192.168.2.12 1080
EOF
fi
