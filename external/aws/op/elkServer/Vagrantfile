# -*- mode: ruby -*-

require 'json'

vpc = nil

# Require vagrant-aws and vagrant-triggers plugins
unless Vagrant.has_plugin?("vagrant-aws")
  STDERR.puts "vagrant-aws plugin not installed"
  exit!
end

unless Vagrant.has_plugin?("vagrant-triggers")
  STDERR.puts "vagrant-triggers plugin not installed"
  exit!
end

# VPC configuration settings
vpcfile = ENV['VPC_JSON']

if not vpcfile
  STDERR.puts "VPC_JSON environment not set"
  exit!
end
begin
  file = File.read(vpcfile)
  outer = JSON.parse(file)
  # vpc name is outer key
  outer.each do |key, value|
    vpc = value
    vpc['name'] = key
  end
rescue Errno::ENOENT
  STDERR.puts "file #{vpcfile} does not exist"
  exit!
rescue JSON::ParserError
  STDERR.puts "file #{vpcfile} has malformed json"
  exit!
end

begin
  subnet = File.read("../../subnet")
rescue Errno::ENOENT
  STDERR.puts "file subnet does not exist"
  exit!
end

Vagrant.configure("2") do |config|

  config.vm.define :elk do |elk|

    elk.vm.box = "elk"
    ec2name = "elk"

    elk.vm.provider :aws do |aws, domain|

      # For AWS_KEY and AWS_SECRET:
      # You have to log into aws  and then use IAM.
      # From IAM, make a user and add to the group redteam.
      # Click on the newly created user and go to the Security credentials tab.
      # see under access key for the values for AWS_KEY and AWS_SECRET.
      #
      # AWS_SECRET is the name of the keypair in EC2 for remote access
      # AWS_KEYPATH is the pathname for the private key of the keypair
      aws.access_key_id = ENV['AWS_KEY']
      aws.secret_access_key = ENV['AWS_SECRET']
      aws.keypair_name = ENV['AWS_KEYNAME']

      domain.ssh.username = "ubuntu"
      domain.ssh.keys_only = true
      domain.ssh.private_key_path = ENV['AWS_KEYPATH']
      domain.ssh.proxy_command = "ssh homebase-#{vpc['name']} nc -q0 elk-#{vpc['name']}.infra.us %p" 

      aws.ami = "ami-b2d463d2"          # xenial
                                        # t2.large for operations
      #aws.instance_type = "t2.large"    
                                        # t2.medium for testing
      aws.instance_type = "t2.medium"
      aws.region = vpc["region"]
      aws.security_groups = [
        vpc["security_groups"]["VPC Allow all traffic"]
      ]
      aws.tags = {
        'Name' => "elk-#{vpc['name']}"
      }
      aws.associate_public_ip = true
      aws.subnet_id = vpc["subnet_id"]
      aws.private_ip_address = "#{subnet}.13"
      aws.block_device_mapping = [{ 'DeviceName' => '/dev/sda1', 'Ebs.VolumeSize' => 50 }]
    end

    elk.vm.provision "shell", :path => "../../../setup.sh"
    
    elk.vm.provision "shell", :path => "puppet.sh"
    
    elk.vm.provision "shell", inline: <<-SHELL
    if [ ! -L /etc/infra/site ]; then
       mkdir -p /etc/infra && ln -s external/aws/op/elkServer/puppet/manifests/site.pp /etc/infra/site
    fi
    SHELL

    elk.vm.provision "shell",
        inline: "hostnamectl set-hostname elk-#{vpc['name']}"

    elk.vm.provision "puppet" do |puppet|
        puppet.manifests_path   = "puppet/manifests"
        puppet.manifest_file   = "site.pp"
        puppet.module_path      = "../../../../puppet/modules"
        puppet.options          = ["--verbose --debug"]
    end

    # re-enable unattended upgrades
    elk.vm.provision "shell", inline: <<-SHELL
    apt-get install -y --reinstall apt
    apt-get install unattended-upgrades
    systemctl enable apt-daily.timer
    systemd-run --on-active=1m /usr/bin/unattended-upgrade
    SHELL
    
    config.vm.synced_folder "../../host-share", "/tmp/host-share", type: "rsync"

  end
end
