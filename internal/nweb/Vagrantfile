# -*- mode: ruby -*-

networkName = nil

begin
  networkName = File.read("../network-name")
rescue Errno::ENOENT
  STDERR.puts "file network-name does not exist"
  exit!
end

networkId = nil

begin
  networkId = File.read("../network-id")
rescue Errno::ENOENT
  STDERR.puts "file network-id does not exist"
  exit!
end

begin
  subnet = File.read("../subnet")
rescue Errno::ENOENT
  STDERR.puts "file subnet does not exist"
  exit!
end

Vagrant.configure("2") do |config|

  config.vm.define :infrastructure do |infrastructure|

    infrastructure.vm.box = "internal"
    infrastructure.vm.hostname = "natlas"

    # check for triggers
    unless Vagrant.has_plugin?("vagrant-triggers")
      STDERR.puts "vagrant-triggers plugin not installed"
      exit!
    end

    infrastructure.vm.provider :libvirt do |domain|
      domain.memory = 2048
      domain.cpus = 2
    end

    # macvtap bridge to get IP to IGBN
    infrastructure.vm.network :public_network,
      :dev => "enp1s0f0",
      :mode => "bridge",
      :type => "direct",
       use_dhcp_assigned_default_route: true

    # Internal network for git and SSH automation
    infrastructure.vm.network :public_network,
      :dev => "virbr#{networkId}",
      :mode => "bridge",
      :type => "bridge",
      :ip => "#{subnet}.14"

    #options for libvirt vagrant provider
    config.vm.provider :libvirt do |libvirt|
      libvirt.driver = "kvm"
      libvirt.storage_pool_name = "virtimages"
      libvirt.autostart = true
      libvirt.random_hostname = true
    end

    config.vm.provision "shell", :path => "../vagrant_setup.sh"

    config.vm.provision "shell", inline: <<-SHELL
    if [ ! -L /etc/infra/site ]; then
       mkdir -p /etc/infra && ln -s internal/natlas/puppet/manifests/site.pp /etc/infra/site
    fi
    SHELL

    config.vm.provision "shell",
        inline: "hostnamectl set-hostname natlas-#{networkName}"

    config.vm.provision "puppet" do |puppet|
        puppet.manifests_path = "puppet/manifests"
        puppet.manifest_file  = "site.pp"
        puppet.module_path    = "../../puppet/modules"
        puppet.options        = ["--verbose --debug"]
    end

    config.vm.synced_folder "../host-share", "/tmp/host-share", type: "rsync"

    # re-enable unattended upgrades
    config.vm.provision "shell", inline: <<-SHELL
    apt-get install -y --reinstall apt
    apt-get install unattended-upgrades
    systemctl enable apt-daily.timer
    systemd-run --on-active=1m /usr/bin/unattended-upgrade
    shutdown -r now
    SHELL

  end
end
