# -*- mode: ruby -*-

require 'json'

vpc = nil

# Require vagrant-aws and vagrant-triggers plugins
unless Vagrant.has_plugin?("vagrant-aws")
  STDERR.puts "vagrant-aws plugin not installed"
  exit!
end

unless Vagrant.has_plugin?("vagrant-triggers")
  STDERR.puts "vagrant-triggers plugin not installed"
  exit!
end

# VPC configuration settings
vpcfile = ENV['VPC_JSON']

if not vpcfile
  STDERR.puts "VPC_JSON environment not set"
  exit!
end
begin
  file = File.read(vpcfile)
  outer = JSON.parse(file)
  # vpc name is outer key
  outer.each do |key, value|
    vpc = value
    vpc['name'] = key
  end
rescue Errno::ENOENT
  STDERR.puts "file #{vpcfile} does not exist"
  exit!
rescue JSON::ParserError
  STDERR.puts "file #{vpcfile} has malformed json"
  exit!
end

begin
  subnet = File.read("../../subnet")
rescue Errno::ENOENT
  STDERR.puts "file subnet does not exist"
  exit!
end

Vagrant.configure("2") do |config|

  config.vm.provider :aws do |aws, domain|

    # For AWS_KEY and AWS_SECRET:
    # You have to log into aws and then use IAM.
    # From IAM, make a user and add to the group redteam.
    # Click on the newly created user and go to the Security credentials tab.
    # see under access key for the values for AWS_KEY and AWS_SECRET.
    #
    # AWS_SECRET is the name of the keypair in EC2 for remote access
    # AWS_KEYPATH is the pathname for the private key of the keypair
    aws.access_key_id = ENV['AWS_KEY']
    aws.secret_access_key = ENV['AWS_SECRET']
    aws.keypair_name = ENV['AWS_KEYNAME']

    domain.ssh.username = "ubuntu"
    domain.ssh.private_key_path = ENV['AWS_KEYPATH']
    domain.ssh.keys_only = true

    aws.ami = "ami-b2d463d2"              # xenial
    aws.instance_type = "t2.medium"
    aws.region = vpc["region"]
    aws.security_groups = [
      vpc["security_groups"]["VPC Allow all traffic"],
      vpc["security_groups"]["HTTP From Anywhere"],
      vpc["security_groups"]["HTTPS From Anywhere"],
      vpc["security_groups"]["2222 From Anywhere"]
    ]
    aws.tags = { }
    aws.associate_public_ip = true
    aws.subnet_id = vpc["subnet_id"]
  end

  # Provision 2 proxy boxes, proxy01 and proxy02.
  # Set their AWS tags and set their hostname. Everything else will be the same across the provisioner steps.
 (1..2).each do |i|

    config.vm.box = "proxy"
    vmName = "proxy#{i}-#{vpc['name']}"

    # Provision each proxy instance
    config.vm.provision "shell", :path => "../../../global/setup.sh"
    config.vm.synced_folder "../../../global/host-share", "/tmp/host-share", type: "rsync"

    config.vm.define vmName do |instance|

      # the line below sends ssh through the homebase for this vpc.
      # This requires that the host stanza be placed in your
      # .ssh/config prior to spinning up the proxies
      instance.ssh.proxy_command = "ssh homebase-#{vpc['name']} nc -q0 proxy0#{i}-#{vpc['name']}.infra.redteam %p"
      instance.vm.provision "shell", inline: "hostnamectl set-hostname #{vmName}"

      instance.vm.provider :aws do |aws|
        aws.tags["Name"] = "proxy0#{i}-#{vpc['name']}"
        aws.private_ip_address = "#{subnet}.1#{i}"
      end

      instance.vm.provision "shell", inline: <<-SHELL
      if [ ! -L /etc/infra/site ]; then
         mkdir -p /etc/infra && ln -s external/aws/op/proxies/puppet/manifests/site.pp /etc/infra/site
      fi
      SHELL

      instance.vm.provision "puppet" do |puppet|
        puppet.manifests_path   = "puppet/manifests"
        puppet.manifest_file   = "site.pp"
        puppet.module_path      = "../../../../puppet/modules"
        puppet.options          = ["--verbose --debug"]
      end

      # re-enable unattended upgrades
      instance.vm.provision "shell", inline: <<-SHELL
      apt-get install -y --reinstall apt
      apt-get install unattended-upgrades
      systemctl enable apt-daily.timer
      systemd-run --on-active=1m /usr/bin/unattended-upgrade
      SHELL

    end
  end
end
